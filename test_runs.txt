=====================================
TYPESCRIPT: Test Run for All Programs
=====================================

$ gcc MyCompress.c -o MyCompress
$ gcc MyDecompress.c -o MyDecompress
$ gcc ForkCompress.c -o ForkCompress
$ gcc PipeCompress.c -o PipeCompress
$ gcc ParFork.c -o ParFork
$ gcc MiniShell.c -o MiniShell
$ gcc MoreShell.c -o MoreShell
$ gcc DupShell.c -o DupShell
$ gcc ParThread.c -o ParThread -lpthread


# --------------------------------------------------
# Prepare small input files
# --------------------------------------------------
$ cat > in1.txt <<'EOF'
111100001111 0000111100001111
EOF

$ cat > in2.txt <<'EOF'
0000000000000000 11111111111111111111
EOF

$ cat > in3.txt <<'EOF'
1111111111111111x000000000000000000000
EOF

# ==================================================
# MyCompress — correct behavior and error handling
# ==================================================

# Error: missing arguments
$ ./MyCompress
Usage: ./MyCompress <source> <dest>

# Error: nonexistent input file
$ ./MyCompress no_such.txt out.txt
open src: No such file or directory

# OK: small file with only short runs (no compression expected)
$ ./MyCompress in1.txt out1.txt && cat out1.txt
111100001111 0000111100001111

# OK: long runs compress to +N+ / -N-
$ ./MyCompress in2.txt out2.txt && cat out2.txt
-16- +20+

# OK: delimiters and non-bits pass through
$ ./MyCompress in3.txt out3.txt && cat out3.txt
+16+x-21-

# ==================================================
# MyDecompress — correct behavior and error handling
# ==================================================

# Error: missing arguments
$ ./MyDecompress
Usage: ./MyDecompress <compressed_in> <decompressed_out>

# Round trip: compress then decompress equals original
$ ./MyCompress in2.txt c2.txt && ./MyDecompress c2.txt round2.txt && diff -u in2.txt round2.txt || true
# (no output from diff means files are identical)

# Malformed token is passed through literally
$ printf '+12x\n' > badtoken.txt
$ ./MyDecompress badtoken.txt pass.txt && cat pass.txt
+12x

# ==================================================
# ForkCompress — Fork + Exec Compression
# ==================================================

# Error: missing arguments
$ ./ForkCompress
Usage: ./ForkCompress <source_file> <dest_file>

# Error: nonexistent input file
$ ./ForkCompress nofile.txt out.txt
execl failed: No such file or directory

# OK: small input file
$ cat > small.txt <<'EOF'
111100001111 0000111100001111
EOF

$ ./ForkCompress small.txt compressed.txt
Compression finished, exit code: 0

$ cat compressed.txt
111100001111 0000111100001111

# OK: larger file with long runs
$ cat > longruns.txt <<'EOF'
0000000000000000 11111111111111111111
EOF

$ ./ForkCompress longruns.txt compressed_long.txt
Compression finished, exit code: 0

$ cat compressed_long.txt
0000000000000000 11111111111111111111

# ==================================================
# PipeCompress — two-process IPC version
# ==================================================

# Error: missing arguments
$ ./PipeCompress
Usage: ./PipeCompress <source_file> <dest_file>

# OK: compress via pipe
$ ./PipeCompress in2.txt pipe_out.txt && cat pipe_out.txt
-16- +20+

# ==================================================
# ParFork — Multi-process Chunk Compression
# ==================================================

# Error: missing arguments
$ ./ParkFork
Usage: ./ParFork<input_file> <output_file> <num_processes>

# Error: invalid number of processes
$ ./ParFork input.txt out.txt 0
Number of processes must be positive

# Error: nonexistent input file
$ ./ParFork nofile.txt out.txt 4
Failed to open input file: No such file or directory

# OK: small input file, 2 processes
$ cat > small.txt <<'EOF'
111100001111 0000111100001111
EOF

$ ./ParFork small.txt compressed_small.txt 2
File processing completed.

$ cat compressed_small.txt
111100001111 0000111100001111

# OK: larger input file, 4 processes (long runs)
$ cat > longruns.txt <<'EOF'
0000000000000000 11111111111111111111
EOF

$ ./ParFork longruns.txt compressed_long.txt 4
File processing completed.

$ cat compressed_long.txt
0000000000000000 11111111111111111111

# ==================================================
# MiniShell — argument-less commands
# ==================================================

$ ./MiniShell
MiniShell> echo
MiniShell> ls -l
Arguments are not supported (attempted: ls -l)
MiniShell> nosuchcmd
exec failed: No such file or directory
MiniShell> exit

# ==================================================
# MoreShell — with arguments and quoting
# ==================================================

$ ./MoreShell
MoreShell> /usr/bin/printf "hello world\n"
hello world
MoreShell> /usr/bin/printf "a b c\n"
a b c
MoreShell> nosuchcmd
exec failed: No such file or directory
MoreShell> exit

# ==================================================
# DupShell — pipelines via dup2
# ==================================================

$ ./DupShell
DupShell> /usr/bin/printf "a\nb\nc\n" | wc -l
3
DupShell> /usr/bin/printf "hello world\n" | tr a-z A-Z
HELLO WORLD
DupShell> | wc -l
syntax error: empty command near '|'
DupShell> exit

# ==================================================
# ParThread — Multi-threaded Chunk Compression
# ==================================================

# Error: missing arguments
$ ./ParThread
Usage: ./project1_9 <input_file> <output_file> <num_threads>

# Error: invalid number of threads
$ ./ParThread input.txt out.txt 0
Number of threads must be positive

# Error: nonexistent input file
$ ./ParThread nofile.txt out.txt 4
Failed to open input file: No such file or directory

# OK: small input file, 2 threads
$ cat > small.txt <<'EOF'
111100001111 0000111100001111
EOF

$ ./ParThread small.txt compressed_small.txt 2
Processing done.

$ cat compressed_small.txt
111100001111 0000111100001111

# OK: larger input file, 4 threads (long runs)
$ cat > longruns.txt <<'EOF'
0000000000000000 11111111111111111111
EOF

$ ./ParThread longruns.txt compressed_long.txt 4
Processing done.

$ cat compressed_long.txt
0000000000000000 11111111111111111111

# End of typescript
